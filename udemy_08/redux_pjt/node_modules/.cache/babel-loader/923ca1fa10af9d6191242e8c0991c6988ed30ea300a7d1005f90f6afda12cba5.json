{"ast":null,"code":"//여기에 리덕스 코드 들어옴.\n// import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\n\n//초기 상태 객체 아래에서 createSlice호출.\n\n//slice를 사용하려면, createSlice호출해서 반환값을 사용해야한다.\nconst counterSlice = createSlice({\n  //전역 상태의 slice를 만들어야한다.\n  name: \"counter\",\n  //모든 slice는 이름이 있어야한다.\n  initialCounterState,\n  //초기상태\n  reducers: {\n    //리듀서는 객체 혹은 맵. 객체 안에 메서드가 존재하면 된다.\n    increment(state) {\n      //redux toolkit과 createSlice를 사용하면 기존의 상태를 바꿀 수 없음.\n      state.counter++;\n    },\n    //여기 있는 모든 메서드는 최근 값 state를 받는다.\n    decrement(state) {\n      state.counter--;\n    },\n    //더이상 action을 넣을 필요 없음.(서로 다른 메서드가 호출되기 때문.)\n    //increase에는 payload가 필요하다.(추가데이터가 필요함)'\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: \"authentication\",\n  initalState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increase\") {\n//     return {\n//       //action.amount: action payload\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };\n\n// const store = createStore(counterReducer);\n\n//configureStore에 객체를 전달한다. 리듀서함수가 아니라 객체를.\nconst store = configureStore({\n  //configureStore 객체 내부에서 reducer프로퍼티를 정의한다.\n  //redux에는 전역 상태를 담당하는 단 하나의 주요 리듀서 함수만 있어야한다.\n  //여기서는 단일 리듀서 함수를 정의할 수 있다 ex) reducer: counterSlice.reducer\n  //어플리케이션 규모가 커질수록 reducer함수가 많아지기때문에 map으로 묶는걸 추천\n  //{}객체로 묶어서 모든 리듀서를 하나의 큰 리듀서로 병합\n  // reducer: { counter: counterSlice.reducer }\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\n\n//액션을 전달하려면 createSlice로 전달할 수 있다.\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","authSlice","initalState","login","logout","store","reducer","auth","counterActions","actions","authActions"],"sources":["C:/Users/SSAFY/Desktop/Project/React/udemy_08/redux_pjt/src/store/index.js"],"sourcesContent":["//여기에 리덕스 코드 들어옴.\r\n// import { createStore } from \"redux\";\r\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\n\r\n//초기 상태 객체 아래에서 createSlice호출.\r\n\r\n//slice를 사용하려면, createSlice호출해서 반환값을 사용해야한다.\r\nconst counterSlice = createSlice({\r\n  //전역 상태의 slice를 만들어야한다.\r\n  name: \"counter\", //모든 slice는 이름이 있어야한다.\r\n  initialCounterState, //초기상태\r\n  reducers: {\r\n    //리듀서는 객체 혹은 맵. 객체 안에 메서드가 존재하면 된다.\r\n    increment(state) {\r\n      //redux toolkit과 createSlice를 사용하면 기존의 상태를 바꿀 수 없음.\r\n      state.counter++;\r\n    }, //여기 있는 모든 메서드는 최근 값 state를 받는다.\r\n    decrement(state) {\r\n      state.counter--;\r\n    }, //더이상 action을 넣을 필요 없음.(서로 다른 메서드가 호출되기 때문.)\r\n    //increase에는 payload가 필요하다.(추가데이터가 필요함)'\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.payload;\r\n    },\r\n    toggleCounter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\nconst initialAuthState = { isAuthenticated: false };\r\n\r\nconst authSlice = createSlice({\r\n  name: \"authentication\",\r\n  initalState: initialAuthState,\r\n  reducers: {\r\n    login(state) {\r\n      state.isAuthenticated = true;\r\n    },\r\n    logout(state) {\r\n      state.isAuthenticated = false;\r\n    },\r\n  },\r\n});\r\n\r\n// const counterReducer = (state = initialState, action) => {\r\n//   if (action.type === \"increase\") {\r\n//     return {\r\n//       //action.amount: action payload\r\n//       counter: state.counter + action.amount,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"decrement\") {\r\n//     return {\r\n//       counter: state.counter - 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"toggle\") {\r\n//     return {\r\n//       showCounter: !state.showCounter,\r\n//       counter: state.counter,\r\n//     };\r\n//   }\r\n\r\n//   return state;\r\n// };\r\n\r\n// const store = createStore(counterReducer);\r\n\r\n//configureStore에 객체를 전달한다. 리듀서함수가 아니라 객체를.\r\nconst store = configureStore({\r\n  //configureStore 객체 내부에서 reducer프로퍼티를 정의한다.\r\n  //redux에는 전역 상태를 담당하는 단 하나의 주요 리듀서 함수만 있어야한다.\r\n  //여기서는 단일 리듀서 함수를 정의할 수 있다 ex) reducer: counterSlice.reducer\r\n  //어플리케이션 규모가 커질수록 reducer함수가 많아지기때문에 map으로 묶는걸 추천\r\n  //{}객체로 묶어서 모든 리듀서를 하나의 큰 리듀서로 병합\r\n  // reducer: { counter: counterSlice.reducer }\r\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\r\n});\r\n\r\n//액션을 전달하려면 createSlice로 전달할 수 있다.\r\nexport const counterActions = counterSlice.actions;\r\nexport const authActions = authSlice.actions;\r\n\r\nexport default store;\r\n"],"mappings":"AAAA;AACA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAE7D;;AAEA;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/B;EACAM,IAAI,EAAE,SAAS;EAAE;EACjBJ,mBAAmB;EAAE;EACrBK,QAAQ,EAAE;IACR;IACAC,SAAS,CAACC,KAAK,EAAE;MACf;MACAA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IAAE;IACHO,SAAS,CAACD,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IAAE;IACH;IACAQ,QAAQ,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,aAAa,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEF,MAAMW,gBAAgB,GAAG;EAAEC,eAAe,EAAE;AAAM,CAAC;AAEnD,MAAMC,SAAS,GAAGjB,WAAW,CAAC;EAC5BM,IAAI,EAAE,gBAAgB;EACtBY,WAAW,EAAEH,gBAAgB;EAC7BR,QAAQ,EAAE;IACRY,KAAK,CAACV,KAAK,EAAE;MACXA,KAAK,CAACO,eAAe,GAAG,IAAI;IAC9B,CAAC;IACDI,MAAM,CAACX,KAAK,EAAE;MACZA,KAAK,CAACO,eAAe,GAAG,KAAK;IAC/B;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,MAAMK,KAAK,GAAGpB,cAAc,CAAC;EAC3B;EACA;EACA;EACA;EACA;EACA;EACAqB,OAAO,EAAE;IAAEnB,OAAO,EAAEE,YAAY,CAACiB,OAAO;IAAEC,IAAI,EAAEN,SAAS,CAACK;EAAQ;AACpE,CAAC,CAAC;;AAEF;AACA,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGT,SAAS,CAACQ,OAAO;AAE5C,eAAeJ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}