{"ast":null,"code":"//여기에 리덕스 코드 들어옴.\nimport { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n//초기 상태 객체 아래에서 createSlice호출.\ncreateSlice({\n  //전역 상태의 slice를 만들어야한다.\n  name: \"counter\",\n  //모든 slice는 이름이 있어야한다.\n  initialState,\n  //초기상태\n  reducers: {\n    //리듀서는 객체 혹은 맵. 객체 안에 메서드가 존재하면 된다.\n    increment(state) {},\n    //여기 있는 모든 메서드는 최근 값 state를 받는다.\n    decrement() {},\n    //더이상 action을 넣을 필요 없음.(서로 다른 메서드가 호출되기 때문.)\n    increase() {},\n    toggleCounter() {}\n  }\n});\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  if (action.type === \"increase\") {\n    return {\n      //action.amount: action payload\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"toggle\") {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n  return state;\n};\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","state","decrement","increase","toggleCounter","counterReducer","action","type","amount","store"],"sources":["C:/Users/SSAFY/Desktop/Project/React/udemy_08/redux_pjt/src/store/index.js"],"sourcesContent":["//여기에 리덕스 코드 들어옴.\r\nimport { createStore } from \"redux\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = { counter: 0, showCounter: true };\r\n\r\n//초기 상태 객체 아래에서 createSlice호출.\r\ncreateSlice({\r\n  //전역 상태의 slice를 만들어야한다.\r\n  name: \"counter\", //모든 slice는 이름이 있어야한다.\r\n  initialState, //초기상태\r\n  reducers: {\r\n    //리듀서는 객체 혹은 맵. 객체 안에 메서드가 존재하면 된다.\r\n    increment(state) {}, //여기 있는 모든 메서드는 최근 값 state를 받는다.\r\n    decrement() {}, //더이상 action을 넣을 필요 없음.(서로 다른 메서드가 호출되기 때문.)\r\n    increase() {},\r\n    toggleCounter() {},\r\n  },\r\n});\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      //action.amount: action payload\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      showCounter: !state.showCounter,\r\n      counter: state.counter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst store = createStore(counterReducer);\r\n\r\nexport default store;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAEtD;AACAH,WAAW,CAAC;EACV;EACAI,IAAI,EAAE,SAAS;EAAE;EACjBH,YAAY;EAAE;EACdI,QAAQ,EAAE;IACR;IACAC,SAAS,CAACC,KAAK,EAAE,CAAC,CAAC;IAAE;IACrBC,SAAS,GAAG,CAAC,CAAC;IAAE;IAChBC,QAAQ,GAAG,CAAC,CAAC;IACbC,aAAa,GAAG,CAAC;EACnB;AACF,CAAC,CAAC;AAEF,MAAMC,cAAc,GAAG,YAAkC;EAAA,IAAjCJ,KAAK,uEAAGN,YAAY;EAAA,IAAEW,MAAM;EAClD,IAAIA,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;IAC9B,OAAO;MACL;MACAX,OAAO,EAAEK,KAAK,CAACL,OAAO,GAAGU,MAAM,CAACE,MAAM;MACtCX,WAAW,EAAEI,KAAK,CAACJ;IACrB,CAAC;EACH;EAEA,IAAIS,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MACLX,OAAO,EAAEK,KAAK,CAACL,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEI,KAAK,CAACJ;IACrB,CAAC;EACH;EAEA,IAAIS,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO;MACLV,WAAW,EAAE,CAACI,KAAK,CAACJ,WAAW;MAC/BD,OAAO,EAAEK,KAAK,CAACL;IACjB,CAAC;EACH;EAEA,OAAOK,KAAK;AACd,CAAC;AAED,MAAMQ,KAAK,GAAGhB,WAAW,CAACY,cAAc,CAAC;AAEzC,eAAeI,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}