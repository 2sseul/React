{"ast":null,"code":"var _jsxFileName = \"/Users/kimeaseul/Desktop/React/udemy_07/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //useState([]) 빈배열로 초기화\n  const [movies, setMovies] = useState([]);\n  //프로미스 객체를 얻을 때에 then 호출 뒤에 then을 제차 호출해서 사용할 수 있지만 async와 await를 사용할 수도 있다.\n  //함수 앞에 async 예약어를 추가하고, 프로미스 객체를 반환하는 작업 앞에 awaut 얘약어를 사용한다.\n  async function fetchMoviesHandler() {\n    //fetch는 브라우저가 사용할 수 있게 해주는 함수 (Fetch API)\n    //두번째 인자를 통해 다양한 선택사항 지정할 수 있는 자바스크립트 객체를 전달할 수 있다.\n    //header , body, http요청 메소드의 변경 등\n    //하지만 여기서는 기본적으로 get 요청 보내고, get 요청으로 원하는거 할 수 있기 떄문에 필요없다 ~\n    //fetch함수는 promise 객체 만드는데, 이 객체는 우리가 잠재적으로 발생할 수 있는 오류나 호출에 대한 응답에 반응할 수 있게 해준다.\n    //Http 전송 방법 = 비동기식. 비동기식은 코드의 결과를 바로 확인하거나 사용할 수 없다. 대신 미래의 어느 시점에서 확인 가능.\n    //프로미스 객체가 있는 이유가 바로, 어느 시점에서 확인 가능하게 하려고.\n    const response = await fetch(\"https://swapi.dev/api/films/\").then(response => {\n      //여기서 들어온 response는 객체이며 요청 응답에 대한 많은 데이터를 가지고 있다.\n      //ex) 응답 헤더를 읽거나, 상태 코드를 얻을 수도 있디.\n      return response.json();\n    }).then(data => {\n      //map()을 사용해서 넘겨받은 배열의 모든 객체를 새로운 객체로 만들어준다.\n      const transFormedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      //여기서 파싱되어 추출된 데이터를 받아온 것(data.results)을 movie에 대한 새로운 상태로 만듬.\n      setMovies(transFormedMovies);\n    });\n    //fetch뒤에 .then()함수 추가하면 응답을 받을 때 호출된다.\n    //그 뒤에 .catch()써서 잠재적 오류를 잡을 수 있음.(여기서 일단 넘김ㄴ)\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"m6SRVq9N0POigGpMlnh/6woD7xI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MoviesList","App","movies","setMovies","fetchMoviesHandler","response","fetch","then","json","data","transFormedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date"],"sources":["/Users/kimeaseul/Desktop/React/udemy_07/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  //useState([]) 빈배열로 초기화\n  const [movies, setMovies] = useState([]);\n  //프로미스 객체를 얻을 때에 then 호출 뒤에 then을 제차 호출해서 사용할 수 있지만 async와 await를 사용할 수도 있다.\n  //함수 앞에 async 예약어를 추가하고, 프로미스 객체를 반환하는 작업 앞에 awaut 얘약어를 사용한다.\n  async function fetchMoviesHandler() {\n    //fetch는 브라우저가 사용할 수 있게 해주는 함수 (Fetch API)\n    //두번째 인자를 통해 다양한 선택사항 지정할 수 있는 자바스크립트 객체를 전달할 수 있다.\n    //header , body, http요청 메소드의 변경 등\n    //하지만 여기서는 기본적으로 get 요청 보내고, get 요청으로 원하는거 할 수 있기 떄문에 필요없다 ~\n    //fetch함수는 promise 객체 만드는데, 이 객체는 우리가 잠재적으로 발생할 수 있는 오류나 호출에 대한 응답에 반응할 수 있게 해준다.\n    //Http 전송 방법 = 비동기식. 비동기식은 코드의 결과를 바로 확인하거나 사용할 수 없다. 대신 미래의 어느 시점에서 확인 가능.\n    //프로미스 객체가 있는 이유가 바로, 어느 시점에서 확인 가능하게 하려고.\n    const response = await fetch(\"https://swapi.dev/api/films/\")\n      .then((response) => {\n        //여기서 들어온 response는 객체이며 요청 응답에 대한 많은 데이터를 가지고 있다.\n        //ex) 응답 헤더를 읽거나, 상태 코드를 얻을 수도 있디.\n        return response.json();\n      })\n      .then((data) => {\n        //map()을 사용해서 넘겨받은 배열의 모든 객체를 새로운 객체로 만들어준다.\n        const transFormedMovies = data.results.map((movieData) => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date,\n          };\n        });\n        //여기서 파싱되어 추출된 데이터를 받아온 것(data.results)을 movie에 대한 새로운 상태로 만듬.\n        setMovies(transFormedMovies);\n      });\n    //fetch뒤에 .then()함수 추가하면 응답을 받을 때 호출된다.\n    //그 뒤에 .catch()써서 잠재적 오류를 잡을 수 있음.(여기서 일단 넘김ㄴ)\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        <MoviesList movies={movies} />\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,WAAW;AAAC;AAEnB,SAASC,GAAG,GAAG;EAAA;EACb;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACxC;EACA;EACA,eAAeK,kBAAkB,GAAG;IAClC;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC,CACzDC,IAAI,CAAEF,QAAQ,IAAK;MAClB;MACA;MACA,OAAOA,QAAQ,CAACG,IAAI,EAAE;IACxB,CAAC,CAAC,CACDD,IAAI,CAAEE,IAAI,IAAK;MACd;MACA,MAAMC,iBAAiB,GAAGD,IAAI,CAACE,OAAO,CAACC,GAAG,CAAEC,SAAS,IAAK;QACxD,OAAO;UACLC,EAAE,EAAED,SAAS,CAACE,UAAU;UACxBC,KAAK,EAAEH,SAAS,CAACG,KAAK;UACtBC,WAAW,EAAEJ,SAAS,CAACK,aAAa;UACpCC,WAAW,EAAEN,SAAS,CAACO;QACzB,CAAC;MACH,CAAC,CAAC;MACF;MACAjB,SAAS,CAACO,iBAAiB,CAAC;IAC9B,CAAC,CAAC;IACJ;IACA;EACF;;EAEA,oBACE,QAAC,KAAK,CAAC,QAAQ;IAAA,wBACb;MAAA,uBACE;QAAQ,OAAO,EAAEN,kBAAmB;QAAA,UAAC;MAAY;QAAA;QAAA;QAAA;MAAA;IAAS;MAAA;MAAA;MAAA;IAAA,QAClD,eACV;MAAA,uBACE,QAAC,UAAU;QAAC,MAAM,EAAEF;MAAO;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QACtB;EAAA;IAAA;IAAA;IAAA;EAAA,QACK;AAErB;AAAC,GA9CQD,GAAG;AAAA,KAAHA,GAAG;AAgDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}