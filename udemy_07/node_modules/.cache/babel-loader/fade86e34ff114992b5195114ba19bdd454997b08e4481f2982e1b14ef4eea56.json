{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SSAFY\\\\Desktop\\\\Project\\\\React\\\\udemy_07\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //useState([]) 빈배열로 초기화\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchMoviesHandler();\n  });\n\n  //프로미스 객체를 얻을 때에 then 호출 뒤에 then을 제차 호출해서 사용할 수 있지만 async와 await를 사용할 수도 있다.\n  //함수 앞에 async 예약어를 추가하고, 프로미스 객체를 반환하는 작업 앞에 awaut 얘약어를 사용한다.\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    //then을 이용해 작업한다면, catch 쓰고 async await 사용해서 작업하면 try/catch쓴다.\n    setError(null);\n    try {\n      //fetch는 브라우저가 사용할 수 있게 해주는 함수 (Fetch API)\n      //두번째 인자를 통해 다양한 선택사항 지정할 수 있는 자바스크립트 객체를 전달할 수 있다.\n      //header , body, http요청 메소드의 변경 등\n      //하지만 여기서는 기본적으로 get 요청 보내고, get 요청으로 원하는거 할 수 있기 떄문에 필요없다 ~\n      //fetch함수는 promise 객체 만드는데, 이 객체는 우리가 잠재적으로 발생할 수 있는 오류나 호출에 대한 응답에 반응할 수 있게 해준다.\n      //Http 전송 방법 = 비동기식. 비동기식은 코드의 결과를 바로 확인하거나 사용할 수 없다. 대신 미래의 어느 시점에서 확인 가능.\n      //프로미스 객체가 있는 이유가 바로, 어느 시점에서 확인 가능하게 하려고.\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n\n      //데이터가 파싱되기 전에 response가 ok인지 확인해줘야한다.\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n      const data = await response.json();\n      // .then((response) => {\n      //여기서 들어온 response는 객체이며 요청 응답에 대한 많은 데이터를 가지고 있다.\n      //ex) 응답 헤더를 읽거나, 상태 코드를 얻을 수도 있디.\n      // return response.json();\n      // })\n      // .then((data) => {\n      //map()을 사용해서 넘겨받은 배열의 모든 객체를 새로운 객체로 만들어준다.\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      //여기서 파싱되어 추출된 데이터를 받아온 것(data.results)을 movie에 대한 새로운 상태로 만듬.\n      setMovies(transformedMovies);\n      // });\n      //fetch뒤에 .then()함수 추가하면 응답을 받을 때 호출된다.\n      //그 뒤에 .catch()써서 잠재적 오류를 잡을 수 있음.(여기서 일단 넘김ㄴ)\n\n      //catch에서 오류 받아와서 처리해준다.\n      //다만 fetch API는 404 501 등의 에러 상태 코드를 실제 에러로 처리하지 않음(기술적인 오류)\n      //axios는 처리 가능.\n    } catch (error) {\n      setError(error.message);\n    }\n    //제대로 된 결과를 받았어도 로딩 끝내줘야하니까. 마지막에 설정.\n    setIsLoading(false);\n  }\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no movies.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 17\n  }, this);\n  if (movies.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(MoviesList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children:\n      /* {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\r\n      {!isLoading && movies.length === 0 && !error && <p>Found no movies.</p>}\r\n      {isLoading && <p> Loading ...</p>}\r\n      {!isLoading && error && <p>Loading...</p>} */\n      content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gvvaxtNEH69eVRFSOgl7uh+ZsGU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","content","length"],"sources":["C:/Users/SSAFY/Desktop/Project/React/udemy_07/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport MoviesList from \"./components/MoviesList\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  //useState([]) 빈배열로 초기화\r\n  const [movies, setMovies] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchMoviesHandler();\r\n  });\r\n\r\n  //프로미스 객체를 얻을 때에 then 호출 뒤에 then을 제차 호출해서 사용할 수 있지만 async와 await를 사용할 수도 있다.\r\n  //함수 앞에 async 예약어를 추가하고, 프로미스 객체를 반환하는 작업 앞에 awaut 얘약어를 사용한다.\r\n  async function fetchMoviesHandler() {\r\n    setIsLoading(true);\r\n    //then을 이용해 작업한다면, catch 쓰고 async await 사용해서 작업하면 try/catch쓴다.\r\n    setError(null);\r\n    try {\r\n      //fetch는 브라우저가 사용할 수 있게 해주는 함수 (Fetch API)\r\n      //두번째 인자를 통해 다양한 선택사항 지정할 수 있는 자바스크립트 객체를 전달할 수 있다.\r\n      //header , body, http요청 메소드의 변경 등\r\n      //하지만 여기서는 기본적으로 get 요청 보내고, get 요청으로 원하는거 할 수 있기 떄문에 필요없다 ~\r\n      //fetch함수는 promise 객체 만드는데, 이 객체는 우리가 잠재적으로 발생할 수 있는 오류나 호출에 대한 응답에 반응할 수 있게 해준다.\r\n      //Http 전송 방법 = 비동기식. 비동기식은 코드의 결과를 바로 확인하거나 사용할 수 없다. 대신 미래의 어느 시점에서 확인 가능.\r\n      //프로미스 객체가 있는 이유가 바로, 어느 시점에서 확인 가능하게 하려고.\r\n      const response = await fetch(\"https://swapi.dev/api/films/\");\r\n\r\n      //데이터가 파싱되기 전에 response가 ok인지 확인해줘야한다.\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      // .then((response) => {\r\n      //여기서 들어온 response는 객체이며 요청 응답에 대한 많은 데이터를 가지고 있다.\r\n      //ex) 응답 헤더를 읽거나, 상태 코드를 얻을 수도 있디.\r\n      // return response.json();\r\n      // })\r\n      // .then((data) => {\r\n      //map()을 사용해서 넘겨받은 배열의 모든 객체를 새로운 객체로 만들어준다.\r\n      const transformedMovies = data.results.map((movieData) => {\r\n        return {\r\n          id: movieData.episode_id,\r\n          title: movieData.title,\r\n          openingText: movieData.opening_crawl,\r\n          releaseDate: movieData.release_date,\r\n        };\r\n      });\r\n      //여기서 파싱되어 추출된 데이터를 받아온 것(data.results)을 movie에 대한 새로운 상태로 만듬.\r\n      setMovies(transformedMovies);\r\n      // });\r\n      //fetch뒤에 .then()함수 추가하면 응답을 받을 때 호출된다.\r\n      //그 뒤에 .catch()써서 잠재적 오류를 잡을 수 있음.(여기서 일단 넘김ㄴ)\r\n\r\n      //catch에서 오류 받아와서 처리해준다.\r\n      //다만 fetch API는 404 501 등의 에러 상태 코드를 실제 에러로 처리하지 않음(기술적인 오류)\r\n      //axios는 처리 가능.\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n    //제대로 된 결과를 받았어도 로딩 끝내줘야하니까. 마지막에 설정.\r\n    setIsLoading(false);\r\n  }\r\n\r\n  let content = <p>Found no movies.</p>;\r\n\r\n  if (movies.length > 0) {\r\n    content = <MoviesList movies={movies} />;\r\n  }\r\n\r\n  if (error) {\r\n    content = <p>{error}</p>;\r\n  }\r\n\r\n  if (isLoading) {\r\n    content = <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section>\r\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\r\n      </section>\r\n      <section>\r\n        {\r\n          /* {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\r\n        {!isLoading && movies.length === 0 && !error && <p>Found no movies.</p>}\r\n        {isLoading && <p> Loading ...</p>}\r\n        {!isLoading && error && <p>Loading...</p>} */\r\n          content\r\n        }\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,WAAW;AAAC;AAEnB,SAASC,GAAG,GAAG;EAAA;EACb;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACdS,kBAAkB,EAAE;EACtB,CAAC,CAAC;;EAEF;EACA;EACA,eAAeA,kBAAkB,GAAG;IAClCH,YAAY,CAAC,IAAI,CAAC;IAClB;IACAE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF;MACA;MACA;MACA;MACA;MACA;MACA;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;;MAE5D;MACA,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;MAClC;MACA;MACA;MACA;MACA;MACA;MACA;MACA,MAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAAEC,SAAS,IAAK;QACxD,OAAO;UACLC,EAAE,EAAED,SAAS,CAACE,UAAU;UACxBC,KAAK,EAAEH,SAAS,CAACG,KAAK;UACtBC,WAAW,EAAEJ,SAAS,CAACK,aAAa;UACpCC,WAAW,EAAEN,SAAS,CAACO;QACzB,CAAC;MACH,CAAC,CAAC;MACF;MACAtB,SAAS,CAACY,iBAAiB,CAAC;MAC5B;MACA;MACA;;MAEA;MACA;MACA;IACF,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAACoB,OAAO,CAAC;IACzB;IACA;IACArB,YAAY,CAAC,KAAK,CAAC;EACrB;EAEA,IAAIsB,OAAO,gBAAG;IAAA,UAAG;EAAgB;IAAA;IAAA;IAAA;EAAA,QAAI;EAErC,IAAIzB,MAAM,CAAC0B,MAAM,GAAG,CAAC,EAAE;IACrBD,OAAO,gBAAG,QAAC,UAAU;MAAC,MAAM,EAAEzB;IAAO;MAAA;MAAA;MAAA;IAAA,QAAG;EAC1C;EAEA,IAAII,KAAK,EAAE;IACTqB,OAAO,gBAAG;MAAA,UAAIrB;IAAK;MAAA;MAAA;MAAA;IAAA,QAAK;EAC1B;EAEA,IAAIF,SAAS,EAAE;IACbuB,OAAO,gBAAG;MAAA,UAAG;IAAU;MAAA;MAAA;MAAA;IAAA,QAAI;EAC7B;EAEA,oBACE,QAAC,KAAK,CAAC,QAAQ;IAAA,wBACb;MAAA,uBACE;QAAQ,OAAO,EAAEnB,kBAAmB;QAAA,UAAC;MAAY;QAAA;QAAA;QAAA;MAAA;IAAS;MAAA;MAAA;MAAA;IAAA,QAClD,eACV;MAAA;MAEI;AACV;AACA;AACA;MACUmB;IAAO;MAAA;MAAA;MAAA;IAAA,QAED;EAAA;IAAA;IAAA;IAAA;EAAA,QACK;AAErB;AAAC,GA7FQ1B,GAAG;AAAA,KAAHA,GAAG;AA+FZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}