{"ast":null,"code":"var _jsxFileName = \"/Users/kimeaseul/Desktop/React/udemy_06/src/components/Login/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useReducer, useContext, useRef } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport AuthContext from \"../../store/auth-context\";\nimport Input from \"../UI/Input/Input\";\n\n//컴포넌트 바깥에 Reducer함수를 선언했는데, 이는 리듀서 함수 내부에서는 컴포넌트 함수 내에서 만들어진 어떤 데이터도 필요하지 않기 때문이다.\n//컴포넌트 내에 만들어진 어떤 데이터와도 상호작용하지 않기 때문에 컴포넌트 바깥에서 선언해도 괜찮다.\n//action으로 디스패치하는 것은 객체이다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.val,\n      isValid: action.val.includes(\"@\")\n    };\n  }\n  //최신 값을 가져오기 위해서는 state.value사용하면 된다.\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.includes(\"@\")\n    };\n  }\n\n  //비어있는 스냅샷\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\nconst passwordReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\nconst Login = props => {\n  _s();\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const authCtx = useContext(AuthContext);\n\n  //useReducer로 전체 state를 다 감싸도 괜찮지만, 이메일만 감싸보겠습니다.\n  //emailReduecer를 실행하도록 useReducer에 리듀서 함수를 전달했다.\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: undefined //또는 null로 설정하면 invalid로 처리되지 않는다.\n  });\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: undefined\n  });\n\n  //객체 디스트럭처링 구문(별칭할당)\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState;\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  //컴포넌트가 처음 마운트 되었을 때 실행된다.\n  //즉 로그인 컴포넌트가 처음으로 렌더링 될 때,\n  //모든 컴포넌트 렌더링 주기 후에 실행.\n  useEffect(() => {\n    console.log(\"EFFECT RUNNING\");\n  });\n  useEffect(() => {\n    //setTimeout함수를 사용하는 이유는, 입력이 들어올 때 마다 상태를 업데이트 해주기 때문에\n    //이를 방지하기 위해 사용자의 입력이 일정시간 없을 때, 유효한지를 검사해주기 위함임.\n    const identifier = setTimeout(() => {\n      console.log(\"Checking from validity!\");\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 500);\n\n    //useEffect가 다음 번에 함수를 실행하기 전에 클린업 프로세스로 실행된다.\n    // 모든 사이드이펙트 함수가 실행되기 전, 컴포넌트가 제거되기 전,\n    return () => {\n      console.log(\"CLEANUP\");\n      //새로운 타이머를 설정하기 전 마지막 타이어를 지우는 clearTimeout\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]);\n  const emailChangeHandler = event => {\n    //dispatchEmail을 호출하여 업데이트한다.\n    //그리고 업데이트한것을 action에 전달.\n    //action은 뭐지? 마음대로 정할 수 있다. 다만, 보통은 어떤 식별자를 가지고 어떤 필드를 가지는 객체이다.\n    //val이라는 payload는 굳이 필요 없지만, 여기서는 사용자가 입력한 값을 넣어줘야 하니까 evnet.target.value 넣어준다.\n\n    dispatchEmail({\n      type: \"USER_INPUT\",\n      val: event.target.value\n    });\n\n    // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.isValid\n    // );\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: \"USER_INPUT\",\n      val: event.target.value\n    });\n\n    // setFormIsValid(\n    //   passwordState.isValid && event.target.value.trim().length > 6\n    // );\n  };\n\n  //여기서는 굳이 val이 필요 없는데, 그 이유는 우리가 input내부에 어떤 문자열이 들어왔는지 체크해야하는 것이 아니라\n  //input에 포커스 아웃 되었는지 확인하기만 하면 되기 때문.\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: \"INPUT_BLUR\"\n    });\n  };\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: \"INPUT_BLUR\"\n    });\n  };\n  const submitHandler = event => {\n    event.preventDefault();\n    //폼이 유효할때는 로그인\n    if (formIsValid) {\n      authCtx.onLogin(emailState.value, passwordState.value);\n      //유효하지 않을 때는 첫번째 인풋박스에 포커스 주려고 한다.\n    } else if (!emailIsValid) {\n      //activate는 Input.js에 정의되어있는 함수!\n      emailInputRef.current.focus();\n    } else {\n      passwordInputRef.current.focus();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        ref: emailInputRef,\n        id: \"email\",\n        type: \"email\",\n        label: \"E-Mail\",\n        defaultValue: emailState.value,\n        isValid: emailIsValid,\n        onChange: emailChangeHandler,\n        onBlur: validateEmailHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        ref: passwordInputRef,\n        id: \"password\",\n        type: \"password\",\n        label: \"Password\",\n        isValid: passwordIsValid,\n        defaultValue: passwordState.value,\n        onChange: passwordChangeHandler,\n        onBlur: validatePasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"ZPrmrRCS7rN9LY/UIKdGwWQ/yPc=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useReducer","useContext","useRef","Card","classes","Button","AuthContext","Input","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","Login","props","formIsValid","setFormIsValid","authCtx","emailState","dispatchEmail","undefined","passwordState","dispatchPassword","emailIsValid","passwordIsValid","emailInputRef","passwordInputRef","console","log","identifier","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","current","focus","login","actions","btn"],"sources":["/Users/kimeaseul/Desktop/React/udemy_06/src/components/Login/Login.js"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useReducer,\n  useContext,\n  useRef,\n} from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport AuthContext from \"../../store/auth-context\";\nimport Input from \"../UI/Input/Input\";\n\n//컴포넌트 바깥에 Reducer함수를 선언했는데, 이는 리듀서 함수 내부에서는 컴포넌트 함수 내에서 만들어진 어떤 데이터도 필요하지 않기 때문이다.\n//컴포넌트 내에 만들어진 어떤 데이터와도 상호작용하지 않기 때문에 컴포넌트 바깥에서 선언해도 괜찮다.\n//action으로 디스패치하는 것은 객체이다.\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return { value: action.val, isValid: action.val.includes(\"@\") };\n  }\n  //최신 값을 가져오기 위해서는 state.value사용하면 된다.\n  if (action.type === \"INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.includes(\"@\") };\n  }\n\n  //비어있는 스냅샷\n  return { value: \"\", isValid: false };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return { value: action.val, isValid: action.val.trim().length > 6 };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.trim().length > 6 };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst Login = (props) => {\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const authCtx = useContext(AuthContext);\n\n  //useReducer로 전체 state를 다 감싸도 괜찮지만, 이메일만 감싸보겠습니다.\n  //emailReduecer를 실행하도록 useReducer에 리듀서 함수를 전달했다.\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: undefined, //또는 null로 설정하면 invalid로 처리되지 않는다.\n  });\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: undefined,\n  });\n\n  //객체 디스트럭처링 구문(별칭할당)\n  const { isValid: emailIsValid } = emailState;\n  const { isValid: passwordIsValid } = passwordState;\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  //컴포넌트가 처음 마운트 되었을 때 실행된다.\n  //즉 로그인 컴포넌트가 처음으로 렌더링 될 때,\n  //모든 컴포넌트 렌더링 주기 후에 실행.\n  useEffect(() => {\n    console.log(\"EFFECT RUNNING\");\n  });\n\n  useEffect(() => {\n    //setTimeout함수를 사용하는 이유는, 입력이 들어올 때 마다 상태를 업데이트 해주기 때문에\n    //이를 방지하기 위해 사용자의 입력이 일정시간 없을 때, 유효한지를 검사해주기 위함임.\n    const identifier = setTimeout(() => {\n      console.log(\"Checking from validity!\");\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 500);\n\n    //useEffect가 다음 번에 함수를 실행하기 전에 클린업 프로세스로 실행된다.\n    // 모든 사이드이펙트 함수가 실행되기 전, 컴포넌트가 제거되기 전,\n    return () => {\n      console.log(\"CLEANUP\");\n      //새로운 타이머를 설정하기 전 마지막 타이어를 지우는 clearTimeout\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]);\n\n  const emailChangeHandler = (event) => {\n    //dispatchEmail을 호출하여 업데이트한다.\n    //그리고 업데이트한것을 action에 전달.\n    //action은 뭐지? 마음대로 정할 수 있다. 다만, 보통은 어떤 식별자를 가지고 어떤 필드를 가지는 객체이다.\n    //val이라는 payload는 굳이 필요 없지만, 여기서는 사용자가 입력한 값을 넣어줘야 하니까 evnet.target.value 넣어준다.\n\n    dispatchEmail({ type: \"USER_INPUT\", val: event.target.value });\n\n    // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.isValid\n    // );\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPassword({ type: \"USER_INPUT\", val: event.target.value });\n\n    // setFormIsValid(\n    //   passwordState.isValid && event.target.value.trim().length > 6\n    // );\n  };\n\n  //여기서는 굳이 val이 필요 없는데, 그 이유는 우리가 input내부에 어떤 문자열이 들어왔는지 체크해야하는 것이 아니라\n  //input에 포커스 아웃 되었는지 확인하기만 하면 되기 때문.\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: \"INPUT_BLUR\",\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: \"INPUT_BLUR\",\n    });\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    //폼이 유효할때는 로그인\n    if (formIsValid) {\n      authCtx.onLogin(emailState.value, passwordState.value);\n      //유효하지 않을 때는 첫번째 인풋박스에 포커스 주려고 한다.\n    } else if (!emailIsValid) {\n      //activate는 Input.js에 정의되어있는 함수!\n      emailInputRef.current.focus();\n    } else {\n      passwordInputRef.current.focus();\n    }\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <Input\n          ref={emailInputRef}\n          id=\"email\"\n          type=\"email\"\n          label=\"E-Mail\"\n          defaultValue={emailState.value}\n          isValid={emailIsValid}\n          onChange={emailChangeHandler}\n          onBlur={validateEmailHandler}\n        />\n        <Input\n          ref={passwordInputRef}\n          id=\"password\"\n          type=\"password\"\n          label=\"Password\"\n          isValid={passwordIsValid}\n          defaultValue={passwordState.value}\n          onChange={passwordChangeHandler}\n          onBlur={validatePasswordHandler}\n        />\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}