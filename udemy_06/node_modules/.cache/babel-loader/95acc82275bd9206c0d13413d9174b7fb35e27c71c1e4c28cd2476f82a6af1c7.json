{"ast":null,"code":"var _jsxFileName = \"/Users/kimeaseul/Desktop/React/udemy_06/src/store/auth-context.js\",\n  _s = $RefreshSig$();\n//여러개의 전역 state에 대해 여러개의 context를 가질수 있다.\n//더 큰 state에 하나의 context만을 가질수도 있고 ~\n\nimport React, { useState, useEffect } from \"react\";\n\n//context객체 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  //여기에 빈 핢수를 작성하는 이유는, 컴포넌트에서 선언할 때 편하게 하기 위해서이다.\n  onLoggedOut: () => {},\n  onLoggedIn: (email, password) => {}\n});\nconst AuthContextProvider = props => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState();\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n    //저장되었는지 확인하고,\n    if (storedUserLoggedInInformation === \"1\") {\n      //저장되어있으면 true로 설정한다\n      setIsLoggedIn(true);\n    }\n  }, []);\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n  const loginHandler = () => {\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn\n    },\n    children: props.childern\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"JRSM+9OFWB1aJamEROx6VmH0gso=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","onLoggedOut","onLoggedIn","email","password","AuthContextProvider","props","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","logoutHandler","removeItem","loginHandler","setItem","childern"],"sources":["/Users/kimeaseul/Desktop/React/udemy_06/src/store/auth-context.js"],"sourcesContent":["//여러개의 전역 state에 대해 여러개의 context를 가질수 있다.\n//더 큰 state에 하나의 context만을 가질수도 있고 ~\n\nimport React, { useState, useEffect } from \"react\";\n\n//context객체 생성\nconst AuthContext = React.createContext({\n  isLoggedIn: false,\n  //여기에 빈 핢수를 작성하는 이유는, 컴포넌트에서 선언할 때 편하게 하기 위해서이다.\n  onLoggedOut: () => {},\n  onLoggedIn: (email, password) => {},\n});\n\nconst AuthContextProvider = (props) => {\n  const [isLoggedIn, setIsLoggedIn] = useState();\n\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n    //저장되었는지 확인하고,\n    if (storedUserLoggedInInformation === \"1\") {\n      //저장되어있으면 true로 설정한다\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  const loginHandler = () => {\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn: isLoggedIn }}>\n      {props.childern}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":";;AAAA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;AAAA;AACA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAa,CAAC;EACtCC,UAAU,EAAE,KAAK;EACjB;EACAC,WAAW,EAAE,MAAM,CAAC,CAAC;EACrBC,UAAU,EAAE,CAACC,KAAK,EAAEC,QAAQ,KAAK,CAAC;AACpC,CAAC,CAAC;AAEF,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EAAA;EACrC,MAAM,CAACN,UAAU,EAAEO,aAAa,CAAC,GAAGX,QAAQ,EAAE;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMW,6BAA6B,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACxE;IACA,IAAIF,6BAA6B,KAAK,GAAG,EAAE;MACzC;MACAD,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,aAAa,GAAG,MAAM;IAC1BF,YAAY,CAACG,UAAU,CAAC,YAAY,CAAC;IACrCL,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,MAAMM,YAAY,GAAG,MAAM;IACzBJ,YAAY,CAACK,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;IACvCP,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,oBACE,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAE;MAAEP,UAAU,EAAEA;IAAW,CAAE;IAAA,UACrDM,KAAK,CAACS;EAAQ;IAAA;IAAA;IAAA;EAAA,QACM;AAE3B,CAAC;AAAC,GA3BIV,mBAAmB;AAAA,KAAnBA,mBAAmB;AA6BzB,eAAeP,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}