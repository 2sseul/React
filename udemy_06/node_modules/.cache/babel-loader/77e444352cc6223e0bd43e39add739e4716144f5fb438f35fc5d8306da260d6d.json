{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SSAFY\\\\Desktop\\\\Project\\\\React\\\\udemy_06\\\\src\\\\components\\\\Login\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useReducer } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\n\n//컴포넌트 바깥에 Reducer함수를 선언했는데, 이는 리듀서 함수 내부에서는 컴포넌트 함수 내에서 만들어진 어떤 데이터도 필요하지 않기 때문이다.\n//컴포넌트 내에 만들어진 어떤 데이터와도 상호작용하지 않기 때문에 컴포넌트 바깥에서 선언해도 괜찮다.\n//action으로 디스패치하는 것은 객체이다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emailReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    };\n  }\n  //최신 값을 가져오기 위해서는 state.value사용하면 된다.\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  }\n\n  //비어있는 스냅샷\n  return {\n    value: '',\n    isValid: false\n  };\n};\nconst passwordReducer = (state, action) => {\n  return {};\n};\nconst Login = props => {\n  _s();\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  //useReducer로 전체 state를 다 감싸도 괜찮지만, 이메일만 감싸보겠습니다.\n  //emailReduecer를 실행하도록 useReducer에 리듀서 함수를 전달했다.\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: undefined //또는 null로 설정하면 invalid로 처리되지 않는다.\n  });\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: undefined\n  });\n\n  //컴포넌트가 처음 마운트 되었을 때 실행된다.\n  //즉 로그인 컴포넌트가 처음으로 렌더링 될 때,\n  //모든 컴포넌트 렌더링 주기 후에 실행.\n  useEffect(() => {\n    console.log('EFFECT RUNNING');\n  });\n\n  // useEffect(()=>{\n  //   //setTimeout함수를 사용하는 이유는, 입력이 들어올 때 마다 상태를 업데이트 해주기 때문에\n  //   //이를 방지하기 위해 사용자의 입력이 일정시간 없을 때, 유효한지를 검사해주기 위함임.\n  //   const identifier = setTimeout(()=>{\n  //     console.log('Checking from validity!');\n  //     setFormIsValid(\n  //       enteredEmail.includes('@') && enteredPassword.trim().length > 6\n  //     );\n  //   },500);\n\n  //   //useEffect가 다음 번에 함수를 실행하기 전에 클린업 프로세스로 실행된다.\n  //   // 모든 사이드이펙트 함수가 실행되기 전, 컴포넌트가 제거되기 전,\n  //   return () => { \n  //     console.log('CLEANUP');\n  //     //새로운 타이머를 설정하기 전 마지막 타이어를 지우는 clearTimeout \n  //     clearTimeout(identifier);\n  //   };\n  // },[enteredEmail, enteredPassword]);\n\n  const emailChangeHandler = event => {\n    //dispatchEmail을 호출하여 업데이트한다.\n    //그리고 업데이트한것을 action에 전달.\n    //action은 뭐지? 마음대로 정할 수 있다. 다만, 보통은 어떤 식별자를 가지고 어떤 필드를 가지는 객체이다.\n    //val이라는 payload는 굳이 필요 없지만, 여기서는 사용자가 입력한 값을 넣어줘야 하니까 evnet.target.value 넣어준다.\n\n    dispatchEmail({\n      type: 'USER_INPUT',\n      val: event.target.value\n    });\n    setFormIsValid(event.target.value.includes('@') && enteredPassword.trim().length > 6);\n  };\n  const passwordChangeHandler = event => {\n    setEnteredPassword(event.target.value);\n    setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n  };\n\n  //여기서는 굳이 val이 필요 없는데, 그 이유는 우리가 input내부에 어떤 문자열이 들어왔는지 체크해야하는 것이 아니라\n  //input에 포커스 아웃 되었는지 확인하기만 하면 되기 때문.\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, enteredPassword);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordIsValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: enteredPassword,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"nBc+bX2SSOGDLmuiJU4iZDVu00k=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useReducer","Card","classes","Button","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","Login","props","formIsValid","setFormIsValid","emailState","dispatchEmail","undefined","passwordState","dispatchPassword","console","log","emailChangeHandler","event","target","enteredPassword","trim","length","passwordChangeHandler","setEnteredPassword","validateEmailHandler","validatePasswordHandler","setPasswordIsValid","submitHandler","preventDefault","onLogin","login","control","invalid","passwordIsValid","actions","btn"],"sources":["C:/Users/SSAFY/Desktop/Project/React/udemy_06/src/components/Login/Login.js"],"sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\r\n\r\nimport Card from '../UI/Card/Card';\r\nimport classes from './Login.module.css';\r\nimport Button from '../UI/Button/Button';\r\n\r\n//컴포넌트 바깥에 Reducer함수를 선언했는데, 이는 리듀서 함수 내부에서는 컴포넌트 함수 내에서 만들어진 어떤 데이터도 필요하지 않기 때문이다.\r\n//컴포넌트 내에 만들어진 어떤 데이터와도 상호작용하지 않기 때문에 컴포넌트 바깥에서 선언해도 괜찮다.\r\n//action으로 디스패치하는 것은 객체이다.\r\nconst emailReducer = (state, action) => {\r\n  if(action.type === 'USER_INPUT'){\r\n    return {value:action.val, isValid:action.val.includes('@')};\r\n  }\r\n  //최신 값을 가져오기 위해서는 state.value사용하면 된다.\r\n  if(action.type === 'INPUT_BLUR'){\r\n    return {value:state.value, isValid:state.value.includes('@')};\r\n  }\r\n\r\n  //비어있는 스냅샷\r\n  return {value:'', isValid: false};\r\n};\r\n\r\nconst passwordReducer = (state, action) => {\r\n  return {};\r\n}\r\n\r\nconst Login = (props) => {\r\n  // const [enteredEmail, setEnteredEmail] = useState('');\r\n  // const [emailIsValid, setEmailIsValid] = useState();\r\n  // const [enteredPassword, setEnteredPassword] = useState('');\r\n  // const [passwordIsValid, setPasswordIsValid] = useState();\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n  \r\n  //useReducer로 전체 state를 다 감싸도 괜찮지만, 이메일만 감싸보겠습니다.\r\n  //emailReduecer를 실행하도록 useReducer에 리듀서 함수를 전달했다.\r\n  const [emailState, dispatchEmail ] = useReducer(emailReducer,{\r\n    value: '',\r\n    isValid: undefined,//또는 null로 설정하면 invalid로 처리되지 않는다.\r\n  });\r\n\r\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\r\n    value: '',\r\n    isValid: undefined,\r\n  })\r\n\r\n  //컴포넌트가 처음 마운트 되었을 때 실행된다.\r\n  //즉 로그인 컴포넌트가 처음으로 렌더링 될 때,\r\n  //모든 컴포넌트 렌더링 주기 후에 실행.\r\n  useEffect(()=>{\r\n    console.log('EFFECT RUNNING');\r\n  });\r\n\r\n  // useEffect(()=>{\r\n  //   //setTimeout함수를 사용하는 이유는, 입력이 들어올 때 마다 상태를 업데이트 해주기 때문에\r\n  //   //이를 방지하기 위해 사용자의 입력이 일정시간 없을 때, 유효한지를 검사해주기 위함임.\r\n  //   const identifier = setTimeout(()=>{\r\n  //     console.log('Checking from validity!');\r\n  //     setFormIsValid(\r\n  //       enteredEmail.includes('@') && enteredPassword.trim().length > 6\r\n  //     );\r\n  //   },500);\r\n\r\n  //   //useEffect가 다음 번에 함수를 실행하기 전에 클린업 프로세스로 실행된다.\r\n  //   // 모든 사이드이펙트 함수가 실행되기 전, 컴포넌트가 제거되기 전,\r\n  //   return () => { \r\n  //     console.log('CLEANUP');\r\n  //     //새로운 타이머를 설정하기 전 마지막 타이어를 지우는 clearTimeout \r\n  //     clearTimeout(identifier);\r\n  //   };\r\n  // },[enteredEmail, enteredPassword]);\r\n\r\n  const emailChangeHandler = (event) => {\r\n    //dispatchEmail을 호출하여 업데이트한다.\r\n    //그리고 업데이트한것을 action에 전달.\r\n    //action은 뭐지? 마음대로 정할 수 있다. 다만, 보통은 어떤 식별자를 가지고 어떤 필드를 가지는 객체이다.\r\n    //val이라는 payload는 굳이 필요 없지만, 여기서는 사용자가 입력한 값을 넣어줘야 하니까 evnet.target.value 넣어준다.\r\n\r\n    dispatchEmail({type:'USER_INPUT',val: event.target.value});\r\n\r\n    setFormIsValid(\r\n      event.target.value.includes('@') && enteredPassword.trim().length > 6\r\n    );\r\n  };\r\n\r\n  const passwordChangeHandler = (event) => {\r\n    setEnteredPassword(event.target.value);\r\n\r\n    setFormIsValid(\r\n      emailState.isValid && event.target.value.trim().length > 6\r\n    );\r\n  };\r\n\r\n  //여기서는 굳이 val이 필요 없는데, 그 이유는 우리가 input내부에 어떤 문자열이 들어왔는지 체크해야하는 것이 아니라\r\n  //input에 포커스 아웃 되었는지 확인하기만 하면 되기 때문.\r\n\r\n  const validateEmailHandler = () => {\r\n    dispatchEmail({\r\n      type:'INPUT_BLUR',\r\n    });\r\n  };\r\n\r\n  const validatePasswordHandler = () => {\r\n    setPasswordIsValid(enteredPassword.trim().length > 6);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    props.onLogin(emailState.value, enteredPassword);\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.login}>\r\n      <form onSubmit={submitHandler}>\r\n        <div\r\n          className={`${classes.control} ${\r\n            emailState.isValid === false ? classes.invalid : ''\r\n          }`}\r\n        >\r\n          <label htmlFor=\"email\">E-Mail</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            value={emailState.value}\r\n            onChange={emailChangeHandler}\r\n            onBlur={validateEmailHandler}\r\n          />\r\n        </div>\r\n        <div\r\n          className={`${classes.control} ${\r\n            passwordIsValid === false ? classes.invalid : ''\r\n          }`}\r\n        >\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            value={enteredPassword}\r\n            onChange={passwordChangeHandler}\r\n            onBlur={validatePasswordHandler}\r\n          />\r\n        </div>\r\n        <div className={classes.actions}>\r\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\r\n            Login\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAE9D,OAAOC,IAAI,MAAM,iBAAiB;AAClC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;;AAExC;AACA;AACA;AAAA;AACA,MAAMC,YAAY,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EACtC,IAAGA,MAAM,CAACC,IAAI,KAAK,YAAY,EAAC;IAC9B,OAAO;MAACC,KAAK,EAACF,MAAM,CAACG,GAAG;MAAEC,OAAO,EAACJ,MAAM,CAACG,GAAG,CAACE,QAAQ,CAAC,GAAG;IAAC,CAAC;EAC7D;EACA;EACA,IAAGL,MAAM,CAACC,IAAI,KAAK,YAAY,EAAC;IAC9B,OAAO;MAACC,KAAK,EAACH,KAAK,CAACG,KAAK;MAAEE,OAAO,EAACL,KAAK,CAACG,KAAK,CAACG,QAAQ,CAAC,GAAG;IAAC,CAAC;EAC/D;;EAEA;EACA,OAAO;IAACH,KAAK,EAAC,EAAE;IAAEE,OAAO,EAAE;EAAK,CAAC;AACnC,CAAC;AAED,MAAME,eAAe,GAAG,CAACP,KAAK,EAAEC,MAAM,KAAK;EACzC,OAAO,CAAC,CAAC;AACX,CAAC;AAED,MAAMO,KAAK,GAAIC,KAAK,IAAK;EAAA;EACvB;EACA;EACA;EACA;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACA;EACA,MAAM,CAACmB,UAAU,EAAEC,aAAa,CAAE,GAAGlB,UAAU,CAACI,YAAY,EAAC;IAC3DI,KAAK,EAAE,EAAE;IACTE,OAAO,EAAES,SAAS,CAAC;EACrB,CAAC,CAAC;;EAEF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,UAAU,CAACY,eAAe,EAAE;IACpEJ,KAAK,EAAE,EAAE;IACTE,OAAO,EAAES;EACX,CAAC,CAAC;;EAEF;EACA;EACA;EACApB,SAAS,CAAC,MAAI;IACZuB,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EAC/B,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;IACpC;IACA;IACA;IACA;;IAEAP,aAAa,CAAC;MAACX,IAAI,EAAC,YAAY;MAACE,GAAG,EAAEgB,KAAK,CAACC,MAAM,CAAClB;IAAK,CAAC,CAAC;IAE1DQ,cAAc,CACZS,KAAK,CAACC,MAAM,CAAClB,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,IAAIgB,eAAe,CAACC,IAAI,EAAE,CAACC,MAAM,GAAG,CAAC,CACtE;EACH,CAAC;EAED,MAAMC,qBAAqB,GAAIL,KAAK,IAAK;IACvCM,kBAAkB,CAACN,KAAK,CAACC,MAAM,CAAClB,KAAK,CAAC;IAEtCQ,cAAc,CACZC,UAAU,CAACP,OAAO,IAAIe,KAAK,CAACC,MAAM,CAAClB,KAAK,CAACoB,IAAI,EAAE,CAACC,MAAM,GAAG,CAAC,CAC3D;EACH,CAAC;;EAED;EACA;;EAEA,MAAMG,oBAAoB,GAAG,MAAM;IACjCd,aAAa,CAAC;MACZX,IAAI,EAAC;IACP,CAAC,CAAC;EACJ,CAAC;EAED,MAAM0B,uBAAuB,GAAG,MAAM;IACpCC,kBAAkB,CAACP,eAAe,CAACC,IAAI,EAAE,CAACC,MAAM,GAAG,CAAC,CAAC;EACvD,CAAC;EAED,MAAMM,aAAa,GAAIV,KAAK,IAAK;IAC/BA,KAAK,CAACW,cAAc,EAAE;IACtBtB,KAAK,CAACuB,OAAO,CAACpB,UAAU,CAACT,KAAK,EAAEmB,eAAe,CAAC;EAClD,CAAC;EAED,oBACE,QAAC,IAAI;IAAC,SAAS,EAAEzB,OAAO,CAACoC,KAAM;IAAA,uBAC7B;MAAM,QAAQ,EAAEH,aAAc;MAAA,wBAC5B;QACE,SAAS,EAAG,GAAEjC,OAAO,CAACqC,OAAQ,IAC5BtB,UAAU,CAACP,OAAO,KAAK,KAAK,GAAGR,OAAO,CAACsC,OAAO,GAAG,EAClD,EAAE;QAAA,wBAEH;UAAO,OAAO,EAAC,OAAO;UAAA,UAAC;QAAM;UAAA;UAAA;UAAA;QAAA,QAAQ,eACrC;UACE,IAAI,EAAC,OAAO;UACZ,EAAE,EAAC,OAAO;UACV,KAAK,EAAEvB,UAAU,CAACT,KAAM;UACxB,QAAQ,EAAEgB,kBAAmB;UAC7B,MAAM,EAAEQ;QAAqB;UAAA;UAAA;UAAA;QAAA,QAC7B;MAAA;QAAA;QAAA;QAAA;MAAA,QACE,eACN;QACE,SAAS,EAAG,GAAE9B,OAAO,CAACqC,OAAQ,IAC5BE,eAAe,KAAK,KAAK,GAAGvC,OAAO,CAACsC,OAAO,GAAG,EAC/C,EAAE;QAAA,wBAEH;UAAO,OAAO,EAAC,UAAU;UAAA,UAAC;QAAQ;UAAA;UAAA;UAAA;QAAA,QAAQ,eAC1C;UACE,IAAI,EAAC,UAAU;UACf,EAAE,EAAC,UAAU;UACb,KAAK,EAAEb,eAAgB;UACvB,QAAQ,EAAEG,qBAAsB;UAChC,MAAM,EAAEG;QAAwB;UAAA;UAAA;UAAA;QAAA,QAChC;MAAA;QAAA;QAAA;QAAA;MAAA,QACE,eACN;QAAK,SAAS,EAAE/B,OAAO,CAACwC,OAAQ;QAAA,uBAC9B,QAAC,MAAM;UAAC,IAAI,EAAC,QAAQ;UAAC,SAAS,EAAExC,OAAO,CAACyC,GAAI;UAAC,QAAQ,EAAE,CAAC5B,WAAY;UAAA,UAAC;QAEtE;UAAA;UAAA;UAAA;QAAA;MAAS;QAAA;QAAA;QAAA;MAAA,QACL;IAAA;MAAA;MAAA;MAAA;IAAA;EACD;IAAA;IAAA;IAAA;EAAA,QACF;AAEX,CAAC;AAAC,GA3HIF,KAAK;AAAA,KAALA,KAAK;AA6HX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}