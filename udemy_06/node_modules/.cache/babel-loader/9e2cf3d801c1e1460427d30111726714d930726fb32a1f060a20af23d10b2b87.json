{"ast":null,"code":"var _jsxFileName = \"/Users/kimeaseul/Desktop/React/udemy_06/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //state가 변경되면 App()을 다시 실행하기 때문에\n  //가장 최근 실행에서 얻은 모든 변수는 사라지게 된다.\n  //즉 다시 시작할 때 모든 데이터가 사라지기 때문에 데이터를 다시 시작해도 유지되는 곳에 저장하는게 좋다.\n  //데이터 저장을 위해 useState를 사용한다.\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  //다만 이렇게 접근하는 방법은 무한루프에 빠질 수 있는데\n  // const storedUserLoggedInInformation = localStorage.getItem('IsLoggedIn');\n  // //저장되었는지 확인하고, \n  // if(storedUserLoggedInInformation === '1'){\n  //   //저장되어있으면 true로 설정한다\n  //   setIsLoggedIn(true);\n  // } \n  //state가 갱신될때마다 얘네는 다시 실행된다..이러면 무한루프\n  //useEffect 쓰면 언제 실행될 지 제어할 수 있으니 useEffect를 사용하자.\n  //useEffect 함수 내부에 정의하면, 얘네는 리액트에서 실행하게 된다.\n  //다만, 모든 컴포넌트를 재평가 한 후에 실행되기 때문에 무한루프에 빠지지 X\n  //근데 모든 컴포넌트 평가 후에 실행되는것이 아님. 지정된 의존성 변경시에만 !!\n  //ex)앱을 다시 실행했을 경우.앱이 다시 실행됐을 경우 의존성이 변경된 것으로 간주되는데, 의존성이 없었기 때문.\n\n  //실제로 익명함수 useEffect는 앱이 시작될 때 한 번만 실행된다. 그 뒤로 의존성이 전혀 변경되지 않기 때문.\n  //왜냐면 두번째 인자(의존성)가 없기 때문.\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('IsLoggedIn');\n    //저장되었는지 확인하고, \n    if (storedUserLoggedInInformation === '1') {\n      //저장되어있으면 true로 설정한다\n      setIsLoggedIn(true);\n    }\n    //두번째 인자(의존성)을 비워두면, 함수가 처음 실행됐을 때 없던 의존성이 계속 없기 때문에 바뀐게 없다.\n  }, []);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    //여기에 로그인 브라우저의 데이터를 저장하려는 것\n    //보통 쿠키 또는 로컬스토리지를 사용한다.\n    //여기서는 로컬스토리지를 사용해볼 예정임\n    //localStorage.setItem(문자열, 문자열);\n    //두번째 인자는 사용자가 로그인 되었을 시 1을 출력하기 위함임.\n    localStorage.setItem('isLoggedIn', '1');\n    console.log(localStorage.getItem('isLoggedIn'));\n    setIsLoggedIn(true);\n  };\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      isAuthenticated: isLoggedIn,\n      onLogout: logoutHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Login","Home","MainHeader","App","isLoggedIn","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","loginHandler","email","password","setItem","console","log","logoutHandler"],"sources":["/Users/kimeaseul/Desktop/React/udemy_06/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\n\nfunction App() {\n  //state가 변경되면 App()을 다시 실행하기 때문에\n  //가장 최근 실행에서 얻은 모든 변수는 사라지게 된다.\n  //즉 다시 시작할 때 모든 데이터가 사라지기 때문에 데이터를 다시 시작해도 유지되는 곳에 저장하는게 좋다.\n  //데이터 저장을 위해 useState를 사용한다.\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  //다만 이렇게 접근하는 방법은 무한루프에 빠질 수 있는데\n  // const storedUserLoggedInInformation = localStorage.getItem('IsLoggedIn');\n  // //저장되었는지 확인하고, \n  // if(storedUserLoggedInInformation === '1'){\n  //   //저장되어있으면 true로 설정한다\n  //   setIsLoggedIn(true);\n  // } \n  //state가 갱신될때마다 얘네는 다시 실행된다..이러면 무한루프\n  //useEffect 쓰면 언제 실행될 지 제어할 수 있으니 useEffect를 사용하자.\n  //useEffect 함수 내부에 정의하면, 얘네는 리액트에서 실행하게 된다.\n  //다만, 모든 컴포넌트를 재평가 한 후에 실행되기 때문에 무한루프에 빠지지 X\n  //근데 모든 컴포넌트 평가 후에 실행되는것이 아님. 지정된 의존성 변경시에만 !!\n  //ex)앱을 다시 실행했을 경우.앱이 다시 실행됐을 경우 의존성이 변경된 것으로 간주되는데, 의존성이 없었기 때문.\n\n  //실제로 익명함수 useEffect는 앱이 시작될 때 한 번만 실행된다. 그 뒤로 의존성이 전혀 변경되지 않기 때문.\n  //왜냐면 두번째 인자(의존성)가 없기 때문.\n  useEffect(()=>{\n\n    const storedUserLoggedInInformation = localStorage.getItem('IsLoggedIn');\n    //저장되었는지 확인하고, \n    if(storedUserLoggedInInformation === '1'){\n    //저장되어있으면 true로 설정한다\n    setIsLoggedIn(true);\n  }\n  //두번째 인자(의존성)을 비워두면, 함수가 처음 실행됐을 때 없던 의존성이 계속 없기 때문에 바뀐게 없다.\n  },[]);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    //여기에 로그인 브라우저의 데이터를 저장하려는 것\n    //보통 쿠키 또는 로컬스토리지를 사용한다.\n    //여기서는 로컬스토리지를 사용해볼 예정임\n    //localStorage.setItem(문자열, 문자열);\n    //두번째 인자는 사용자가 로그인 되었을 시 1을 출력하기 위함임.\n    localStorage.setItem('isLoggedIn','1');\n    console.log(localStorage.getItem('isLoggedIn'));\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n  };\n\n  return (\n    <React.Fragment>\n      <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,UAAU,MAAM,oCAAoC;AAAC;AAE5D,SAASC,GAAG,GAAG;EAAA;EACb;EACA;EACA;EACA;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACAC,SAAS,CAAC,MAAI;IAEZ,MAAMO,6BAA6B,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACxE;IACA,IAAGF,6BAA6B,KAAK,GAAG,EAAC;MACzC;MACAD,aAAa,CAAC,IAAI,CAAC;IACrB;IACA;EACA,CAAC,EAAC,EAAE,CAAC;EAEL,MAAMI,YAAY,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACxC;IACA;IACA;IACA;IACA;IACA;IACA;IACAJ,YAAY,CAACK,OAAO,CAAC,YAAY,EAAC,GAAG,CAAC;IACtCC,OAAO,CAACC,GAAG,CAACP,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;IAC/CH,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMU,aAAa,GAAG,MAAM;IAC1BV,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,oBACE,QAAC,KAAK,CAAC,QAAQ;IAAA,wBACb,QAAC,UAAU;MAAC,eAAe,EAAED,UAAW;MAAC,QAAQ,EAAEW;IAAc;MAAA;MAAA;MAAA;IAAA,QAAG,eACpE;MAAA,WACG,CAACX,UAAU,iBAAI,QAAC,KAAK;QAAC,OAAO,EAAEK;MAAa;QAAA;QAAA;QAAA;MAAA,QAAG,EAC/CL,UAAU,iBAAI,QAAC,IAAI;QAAC,QAAQ,EAAEW;MAAc;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAC3C;EAAA;IAAA;IAAA;IAAA;EAAA,QACQ;AAErB;AAAC,GA5DQZ,GAAG;AAAA,KAAHA,GAAG;AA8DZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}