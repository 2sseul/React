{"ast":null,"code":"var _jsxFileName = \"/Users/kimeaseul/Desktop/React/udemy_06/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./store/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //state가 변경되면 App()을 다시 실행하기 때문에\n  //가장 최근 실행에서 얻은 모든 변수는 사라지게 된다.\n  //즉 다시 시작할 때 모든 데이터가 사라지기 때문에 데이터를 다시 시작해도 유지되는 곳에 저장하는게 좋다.\n  //데이터 저장을 위해 useState를 사용한다.\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const ctx = useContext(AuthContext);\n\n  //다만 이렇게 접근하는 방법은 무한루프에 빠질 수 있는데\n  // const storedUserLoggedInInformation = localStorage.getItem('IsLoggedIn');\n  // //저장되었는지 확인하고,\n  // if(storedUserLoggedInInformation === '1'){\n  //   //저장되어있으면 true로 설정한다\n  //   setIsLoggedIn(true);\n  // }\n  //state가 갱신될때마다 얘네는 다시 실행된다..이러면 무한루프\n  //useEffect 쓰면 언제 실행될 지 제어할 수 있으니 useEffect를 사용하자.\n  //useEffect 함수 내부에 정의하면, 얘네는 리액트에서 실행하게 된다.\n  //다만, 모든 컴포넌트를 재평가 한 후에 실행되기 때문에 무한루프에 빠지지 X\n  //근데 모든 컴포넌트 평가 후에 실행되는것이 아님. 지정된 의존성 변경시에만 !!\n  //ex)앱을 다시 실행했을 경우.\n  // useEffect(() => {\n  //   const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n  //   //저장되었는지 확인하고,\n  //   if (storedUserLoggedInInformation === \"1\") {\n  //     //저장되어있으면 true로 설정한다\n  //     setIsLoggedIn(true);\n  //   }\n  // }, []);\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n  //   //여기에 로그인 브라우저의 데이터를 저장하려는 것\n  //   //보통 쿠키 또는 로컬스토리지를 사용한다.\n  //   //여기서는 로컬스토리지를 사용해볼 예정임\n  //   //localStorage.setItem(문자열, 문자열);\n  //   //두번째 인자는 사용자가 로그인 되었을 시 1을 출력하기 위함임.\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n\n  // const logoutHandler = () => {\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n\n  //AuthContext자체는 컴포넌트가 되지 않는다.\n  //그래서 공급자를 지정해줘야 한다. AuthContext.Provider\n  //AuthContex로 감싼 모든 자손 컴포넌트들은 전부 AuthContext에 접근 가능하다 ~\n  return (\n    /*#__PURE__*/\n    // <AuthContext.Provider\n    //   value={{\n    //     //고정된 값인 false가 아닌 useState로 관리중인 isLoggedIn을 인자로 사용하면, 동적으로 활용할 수 있다.\n    //     //이렇게 Provider에 isLoggedIn객체를 설정해두면, 컴포넌트에서 props를 사용할 필요가 없다.\n    //     //ex. MainHeader내부에서 isLoggedIn을 props로 전달할 필요가 없는것.\n    //     isLoggedIn: isLoggedIn,\n    //     //문자열이나 객체 등의 값을 전달할 수는 없지만, 함수는 전달할 수 있다.\n    //     onLogout: logoutHandler,\n    //   }}\n    // >\n    _jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [!ctx.isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }, this), ctx.isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this)\n    // </AuthContext.Provider>\n  );\n}\n_s(App, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useContext","Login","Home","MainHeader","AuthContext","App","ctx","isLoggedIn"],"sources":["/Users/kimeaseul/Desktop/React/udemy_06/src/App.js"],"sourcesContent":["import React, { useContext } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./store/auth-context\";\n\nfunction App() {\n  //state가 변경되면 App()을 다시 실행하기 때문에\n  //가장 최근 실행에서 얻은 모든 변수는 사라지게 된다.\n  //즉 다시 시작할 때 모든 데이터가 사라지기 때문에 데이터를 다시 시작해도 유지되는 곳에 저장하는게 좋다.\n  //데이터 저장을 위해 useState를 사용한다.\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const ctx = useContext(AuthContext);\n\n  //다만 이렇게 접근하는 방법은 무한루프에 빠질 수 있는데\n  // const storedUserLoggedInInformation = localStorage.getItem('IsLoggedIn');\n  // //저장되었는지 확인하고,\n  // if(storedUserLoggedInInformation === '1'){\n  //   //저장되어있으면 true로 설정한다\n  //   setIsLoggedIn(true);\n  // }\n  //state가 갱신될때마다 얘네는 다시 실행된다..이러면 무한루프\n  //useEffect 쓰면 언제 실행될 지 제어할 수 있으니 useEffect를 사용하자.\n  //useEffect 함수 내부에 정의하면, 얘네는 리액트에서 실행하게 된다.\n  //다만, 모든 컴포넌트를 재평가 한 후에 실행되기 때문에 무한루프에 빠지지 X\n  //근데 모든 컴포넌트 평가 후에 실행되는것이 아님. 지정된 의존성 변경시에만 !!\n  //ex)앱을 다시 실행했을 경우.\n  // useEffect(() => {\n  //   const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n  //   //저장되었는지 확인하고,\n  //   if (storedUserLoggedInInformation === \"1\") {\n  //     //저장되어있으면 true로 설정한다\n  //     setIsLoggedIn(true);\n  //   }\n  // }, []);\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n  //   //여기에 로그인 브라우저의 데이터를 저장하려는 것\n  //   //보통 쿠키 또는 로컬스토리지를 사용한다.\n  //   //여기서는 로컬스토리지를 사용해볼 예정임\n  //   //localStorage.setItem(문자열, 문자열);\n  //   //두번째 인자는 사용자가 로그인 되었을 시 1을 출력하기 위함임.\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n\n  // const logoutHandler = () => {\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n\n  //AuthContext자체는 컴포넌트가 되지 않는다.\n  //그래서 공급자를 지정해줘야 한다. AuthContext.Provider\n  //AuthContex로 감싼 모든 자손 컴포넌트들은 전부 AuthContext에 접근 가능하다 ~\n  return (\n    // <AuthContext.Provider\n    //   value={{\n    //     //고정된 값인 false가 아닌 useState로 관리중인 isLoggedIn을 인자로 사용하면, 동적으로 활용할 수 있다.\n    //     //이렇게 Provider에 isLoggedIn객체를 설정해두면, 컴포넌트에서 props를 사용할 필요가 없다.\n    //     //ex. MainHeader내부에서 isLoggedIn을 props로 전달할 필요가 없는것.\n    //     isLoggedIn: isLoggedIn,\n    //     //문자열이나 객체 등의 값을 전달할 수는 없지만, 함수는 전달할 수 있다.\n    //     onLogout: logoutHandler,\n    //   }}\n    // >\n    <React.Fragment>\n      <MainHeader />\n      <main>\n        {!ctx.isLoggedIn && <Login />}\n        {ctx.isLoggedIn && <Home />}\n      </main>\n    </React.Fragment>\n    // </AuthContext.Provider>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AAEzC,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,WAAW,MAAM,sBAAsB;AAAC;AAE/C,SAASC,GAAG,GAAG;EAAA;EACb;EACA;EACA;EACA;EACA;;EAEA,MAAMC,GAAG,GAAGN,UAAU,CAACI,WAAW,CAAC;;EAEnC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAC,KAAK,CAAC,QAAQ;MAAA,wBACb,QAAC,UAAU;QAAA;QAAA;QAAA;MAAA,QAAG,eACd;QAAA,WACG,CAACE,GAAG,CAACC,UAAU,iBAAI,QAAC,KAAK;UAAA;UAAA;UAAA;QAAA,QAAG,EAC5BD,GAAG,CAACC,UAAU,iBAAI,QAAC,IAAI;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA,QACtB;IAAA;MAAA;MAAA;MAAA;IAAA;IAET;EAAA;AAEJ;AAAC,GAvEQF,GAAG;AAAA,KAAHA,GAAG;AAyEZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}