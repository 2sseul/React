{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SSAFY\\\\Desktop\\\\Project\\\\React\\\\udemy_06\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport AuthContext from './store/auth-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //state가 변경되면 App()을 다시 실행하기 때문에\n  //가장 최근 실행에서 얻은 모든 변수는 사라지게 된다.\n  //즉 다시 시작할 때 모든 데이터가 사라지기 때문에 데이터를 다시 시작해도 유지되는 곳에 저장하는게 좋다.\n  //데이터 저장을 위해 useState를 사용한다.\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  //다만 이렇게 접근하는 방법은 무한루프에 빠질 수 있는데\n  // const storedUserLoggedInInformation = localStorage.getItem('IsLoggedIn');\n  // //저장되었는지 확인하고, \n  // if(storedUserLoggedInInformation === '1'){\n  //   //저장되어있으면 true로 설정한다\n  //   setIsLoggedIn(true);\n  // } \n  //state가 갱신될때마다 얘네는 다시 실행된다..이러면 무한루프\n  //useEffect 쓰면 언제 실행될 지 제어할 수 있으니 useEffect를 사용하자.\n  //useEffect 함수 내부에 정의하면, 얘네는 리액트에서 실행하게 된다.\n  //다만, 모든 컴포넌트를 재평가 한 후에 실행되기 때문에 무한루프에 빠지지 X\n  //근데 모든 컴포넌트 평가 후에 실행되는것이 아님. 지정된 의존성 변경시에만 !!\n  //ex)앱을 다시 실행했을 경우.\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n    //저장되었는지 확인하고, \n    if (storedUserLoggedInInformation === '1') {\n      //저장되어있으면 true로 설정한다\n      setIsLoggedIn(true);\n    }\n  }, []);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    //여기에 로그인 브라우저의 데이터를 저장하려는 것\n    //보통 쿠키 또는 로컬스토리지를 사용한다.\n    //여기서는 로컬스토리지를 사용해볼 예정임\n    //localStorage.setItem(문자열, 문자열);\n    //두번째 인자는 사용자가 로그인 되었을 시 1을 출력하기 위함임.\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  //AuthContext자체는 컴포넌트가 되지 않는다.\n  //그래서 공급자를 지정해줘야 한다. AuthContext.Provider\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      isAuthenticated: isLoggedIn,\n      onLogout: logoutHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 27\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Login","Home","MainHeader","AuthContext","App","isLoggedIn","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem"],"sources":["C:/Users/SSAFY/Desktop/Project/React/udemy_06/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport Login from './components/Login/Login';\r\nimport Home from './components/Home/Home';\r\nimport MainHeader from './components/MainHeader/MainHeader';\r\nimport AuthContext from './store/auth-context';\r\n\r\nfunction App() {\r\n  //state가 변경되면 App()을 다시 실행하기 때문에\r\n  //가장 최근 실행에서 얻은 모든 변수는 사라지게 된다.\r\n  //즉 다시 시작할 때 모든 데이터가 사라지기 때문에 데이터를 다시 시작해도 유지되는 곳에 저장하는게 좋다.\r\n  //데이터 저장을 위해 useState를 사용한다.\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  //다만 이렇게 접근하는 방법은 무한루프에 빠질 수 있는데\r\n  // const storedUserLoggedInInformation = localStorage.getItem('IsLoggedIn');\r\n  // //저장되었는지 확인하고, \r\n  // if(storedUserLoggedInInformation === '1'){\r\n  //   //저장되어있으면 true로 설정한다\r\n  //   setIsLoggedIn(true);\r\n  // } \r\n  //state가 갱신될때마다 얘네는 다시 실행된다..이러면 무한루프\r\n  //useEffect 쓰면 언제 실행될 지 제어할 수 있으니 useEffect를 사용하자.\r\n  //useEffect 함수 내부에 정의하면, 얘네는 리액트에서 실행하게 된다.\r\n  //다만, 모든 컴포넌트를 재평가 한 후에 실행되기 때문에 무한루프에 빠지지 X\r\n  //근데 모든 컴포넌트 평가 후에 실행되는것이 아님. 지정된 의존성 변경시에만 !!\r\n  //ex)앱을 다시 실행했을 경우.\r\n  useEffect(()=>{\r\n\r\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\r\n    //저장되었는지 확인하고, \r\n    if(storedUserLoggedInInformation === '1'){\r\n    //저장되어있으면 true로 설정한다\r\n    setIsLoggedIn(true);\r\n  }\r\n  },[]);\r\n\r\n  const loginHandler = (email, password) => {\r\n    // We should of course check email and password\r\n    // But it's just a dummy/ demo anyways\r\n    //여기에 로그인 브라우저의 데이터를 저장하려는 것\r\n    //보통 쿠키 또는 로컬스토리지를 사용한다.\r\n    //여기서는 로컬스토리지를 사용해볼 예정임\r\n    //localStorage.setItem(문자열, 문자열);\r\n    //두번째 인자는 사용자가 로그인 되었을 시 1을 출력하기 위함임.\r\n    localStorage.setItem('isLoggedIn','1');\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem('isLoggedIn');\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  //AuthContext자체는 컴포넌트가 되지 않는다.\r\n  //그래서 공급자를 지정해줘야 한다. AuthContext.Provider\r\n  return (\r\n      <AuthContext.Provider>\r\n        <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\r\n        <main>\r\n          {!isLoggedIn && <Login onLogin={loginHandler} />}\r\n          {isLoggedIn && <Home onLogout={logoutHandler} />}\r\n        </main>\r\n      </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,WAAW,MAAM,sBAAsB;AAAC;AAE/C,SAASC,GAAG,GAAG;EAAA;EACb;EACA;EACA;EACA;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,SAAS,CAAC,MAAI;IAEZ,MAAMQ,6BAA6B,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACxE;IACA,IAAGF,6BAA6B,KAAK,GAAG,EAAC;MACzC;MACAD,aAAa,CAAC,IAAI,CAAC;IACrB;EACA,CAAC,EAAC,EAAE,CAAC;EAEL,MAAMI,YAAY,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACxC;IACA;IACA;IACA;IACA;IACA;IACA;IACAJ,YAAY,CAACK,OAAO,CAAC,YAAY,EAAC,GAAG,CAAC;IACtCP,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMQ,aAAa,GAAG,MAAM;IAC1BN,YAAY,CAACO,UAAU,CAAC,YAAY,CAAC;IACrCT,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;;EAED;EACA;EACA,oBACI,QAAC,WAAW,CAAC,QAAQ;IAAA,wBACnB,QAAC,UAAU;MAAC,eAAe,EAAED,UAAW;MAAC,QAAQ,EAAES;IAAc;MAAA;MAAA;MAAA;IAAA,QAAG,eACpE;MAAA,WACG,CAACT,UAAU,iBAAI,QAAC,KAAK;QAAC,OAAO,EAAEK;MAAa;QAAA;QAAA;QAAA;MAAA,QAAG,EAC/CL,UAAU,iBAAI,QAAC,IAAI;QAAC,QAAQ,EAAES;MAAc;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAC3C;EAAA;IAAA;IAAA;IAAA;EAAA,QACc;AAE7B;AAAC,GA1DQV,GAAG;AAAA,KAAHA,GAAG;AA4DZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}